# -*- coding: utf-8 -*-
"""imagetoimage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vRwU1TfP9EOW2Jn_iJgx3FEaqhEjhCu3
"""

!pip install -q tensorflow matplotlib

!wget -c http://efrosgans.eecs.berkeley.edu/pix2pix/datasets/facades.tar.gz
!tar -xzf facades.tar.gz

import tensorflow as tf
import os
import glob
import matplotlib.pyplot as plt

IMG_WIDTH = 256
IMG_HEIGHT = 256

def load_image(path):
    image = tf.io.read_file(path)
    image = tf.image.decode_jpeg(image)
    w = tf.shape(image)[1] // 2
    input_image = image[:, :w, :]
    target_image = image[:, w:, :]
    input_image = tf.image.resize(input_image, [IMG_HEIGHT, IMG_WIDTH])
    target_image = tf.image.resize(target_image, [IMG_HEIGHT, IMG_WIDTH])
    input_image = (tf.cast(input_image, tf.float32) / 127.5) - 1
    target_image = (tf.cast(target_image, tf.float32) / 127.5) - 1
    return input_image, target_image

def load_dataset(path_pattern):
    files = glob.glob(path_pattern)
    dataset = tf.data.Dataset.from_tensor_slices(files)
    dataset = dataset.map(lambda x: load_image(x),
                          num_parallel_calls=tf.data.AUTOTUNE)
    return dataset.batch(1)

train_dataset = load_dataset("facades/train/*.jpg")
test_dataset = load_dataset("facades/test/*.jpg")

# Visualize one training image
for input_image, target_image in train_dataset.take(1):
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.title("Input Image")
    plt.imshow((input_image[0] + 1) / 2)  # Un-normalize
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title("Target Image")
    plt.imshow((target_image[0] + 1) / 2)  # Un-normalize
    plt.axis('off')

    plt.show()

import matplotlib.pyplot as plt

# Display another example from the training set
for input_image, target_image in train_dataset.skip(1).take(1):  # Skip the first, show the second
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.title("Input Image (Facade Photo)")
    plt.imshow((input_image[0] + 1) / 2)  # Scale from [-1, 1] to [0, 1]
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.title("Target Image (Edge Drawing)")
    plt.imshow((target_image[0] + 1) / 2)
    plt.axis("off")

    plt.tight_layout()
    plt.show()

for inp, tar in train_dataset.take(1):
    plt.figure(figsize=(10,5))

    plt.subplot(1, 2, 1)
    plt.title("Input (Edge)")
    plt.imshow((inp[0] + 1) / 2)
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.title("Target (Real Image)")
    plt.imshow((tar[0] + 1) / 2)
    plt.axis("off")

    plt.show()